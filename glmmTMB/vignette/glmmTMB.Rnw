% \VignetteIndexEntry{basic examples of glmmTMB usage}
% \VignettePackage{glmmTMB}
% \VignetteDepends{ggplot2}
% \VignetteDepends{grid}
%\VignetteEngine{knitr::knitr}
\documentclass{article}
%\usepackage{lineno}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
%\usepackage[usenames]{color}
\usepackage[american]{babel}
\newcommand{\R}{{\sf R}}
\newcommand{\Splus}{{\sf S-PLUS}}
\newcommand{\fixme}[1]{\textbf{FIXME: #1}}
% \newcommand{\fixme}[1]{\color{red} #1 \color{black}}
\usepackage{url}
\usepackage{hyperref}
\usepackage{alltt}
\newcommand{\code}[1]{{\tt #1}}
\usepackage{fancyvrb}
\usepackage{natbib}
\VerbatimFootnotes
\bibliographystyle{chicago}

\title{Getting started with the \code{glmmTMB} package}
\author{Ben Bolker}
\date{\today}
\begin{document}
\maketitle

%\linenumbers

<<setopts,echo=FALSE>>=
require("knitr")
opts_chunk$set(fig.width=5,fig.height=5,
               out.width="0.8\\textwidth",echo=TRUE)
Rver <- paste(R.version$major,R.version$minor,sep=".")
used.pkgs <- c("glmmTMB","bbmle")  ## packages to report below
@ 


\section{Introduction/quick start}

\code{glmmTMB} is an R package built on 
the \href{Template Model Builder}{https://github.com/kaskr/adcomp} nonlinear fitting engine, for fitting generalized
linear mixed models and extensions.

\begin{itemize}
  \item response distributions: Poisson, binomial, negative binomial (NB1 and NB2 parameterizations), Gamma, Beta, truncated Poisson and negative binomial; Gaussian; logistic
  \item link functions: log, logit, probit, complementary log-log, inverse, identity
  \item zero-inflation with fixed and random-effects components; hurdle models via truncated Poisson/NB
  \item single or multiple (nested or crossed) random effects
  \item offsets
  \item fixed-effects models for dispersion
  \item diagonal, compound-symmetric, or unstructured random effects variance-covariance matrices
\end{itemize}

In order to use \code{glmmTMB} effectively you should already
be reasonably familiar with generalized linear mixed models
(GLMMs), which in turn requires familiarity with (i) generalized
linear models (e.g. the special cases of logistic, binomial,
and Poisson regression) and (ii) `modern' mixed models (those
working via maximization of the marginal likelihood rather
than by manipulating sums of squares).

In order to fit a model in \code{glmmTMB} you need to:
\begin{itemize}
\item specify a model for the conditional effects, in the standard
  R (Wilkinson-Rogers) formula notation (see \code{?formula}
  or Section 11.1 of the \href{http://cran.r-project.org/doc/manuals/R-intro.pdf}{Introduction to R}. 
  Formulae can also include \emph{offsets}.
\item specify a model for the random effects, in the notation
  that is common to the \code{nlme} and \code{lme4} packages.
  Random effects are specified as \code{x|g}, where \code{x}
  is an effect and \code{g} is a grouping factor (which must
  be a factor variable, or a nesting of/interaction among factor variables).
  For example, the formula would be \code{1|block} for a random-intercept model
  or \code{time|block} for a model with random variation in slopes
  through time across groups specified by \code{block}. A model
  of nested random effects (block within site) would be
  \code{1|site/block}; a model of crossed random effects
  (block and year) would be \code{(1|block)+(1|year)}.
\item choose the error distribution by specifying the family 
\item optionally specify a zero-inflation model with fixed and/or random effects
\item optionally specify a dispersion model with fixed effects
\end{itemize}

This document was
generated using \Sexpr{R.version$version.string} and package versions:
<<pkgversions,echo=FALSE>>=
pkgver <- vapply(sort(used.pkgs),function(x) as.character(packageVersion(x)),"")
print(pkgver,quote=FALSE)
@ 

%% fixme: would like to deal with smart quotes
<<citation,echo=FALSE>>=
op <- options(useFancyQuotes=FALSE)
citation("glmmTMB")
options(op)
@ 
\section{Preliminaries: packages and data}

<<pkgs,message=FALSE>>=
library("glmmTMB")
library("bbmle")
library("ggplot2")
## cosmetic
theme_set(theme_bw()+
  theme(panel.margin=grid::unit(0,"lines")))
@ 

These data, taken from \cite{zuur_mixed_2009} and ultimately
from \cite{roulinbersier_2007}, quantify
the number of negotiations among owlets (owl chicks)
in different nests \emph{prior} to the arrival
of a provisioning parent as a function of food treatment
(deprived or satiated), the sex of the parent, and
arrival time.  The total number of calls from the
nest is recorded, along with the total brood size, which
is used as an offset to allow the use of a Poisson response.

Since the same nests are measured repeatedly, the nest is used as
a random effect.
The model can be expressed as a zero-inflated generalized
linear mixed model (ZIGLMM).

First we draw a picture (Figures~\ref{fig:owl1}).

Various small manipulations of the data set:
(1) reorder nests by mean negotiations per chick, for plotting
purposes; (2) add log brood size variable (for offset);
(3) rename response variable.
%% FIXME: I get a warning message ("NAs introduced by coercion")  here, but only in knitr,
%%  and not on a clean start ... ?
%% some weird package interaction ?
<<owltransform,warning=FALSE>>=
Owls <- transform(Owls,
                  Nest=reorder(Nest,NegPerChick),
                  NCalls=SiblingNegotiation)
@ 
(If you were really using this data set you should start
with \code{summary(Owls)} to explore the data set.)

<<owlplot1,echo=FALSE,message=FALSE,warning=FALSE,fig.cap="Basic view of owl data (arrival time not shown). (FIXME: clip at zero?)",fig.ref="fig:owl1">>=
G0 <- ggplot(Owls,aes(x=reorder(Nest,NegPerChick),
                      y=NegPerChick))+
  labs(x="Nest",y="Negotiations per chick")+coord_flip()+
  facet_grid(FoodTreatment~SexParent)
G0+stat_sum(aes(size=..n..),alpha=0.5)+
      scale_size_continuous(name="# obs",
                            breaks=seq(1,9,by=2))+
    theme(axis.title.x=element_text(hjust=0.5,size=12),
         axis.text.y=element_text(size=7))
@ 

We should explore the data further, e.g. by visualizing the effect
of arrival time, but this is a vignette about \code{glmmTMB},
not data visualization \ldots

Now fit some models:

The basic \code{glmmTMB} fit --- a zero-inflated Poisson model.
<<time1,echo=FALSE,cache=TRUE>>=
gt1 <- system.time(glmmTMB(NCalls~(FoodTreatment+ArrivalTime)*SexParent+
                                     offset(log(BroodSize))+(1|Nest),
                                     zi=~1,
                                     data=Owls,
                                     family=poisson))
@ 
%% ditto with NA coercion warnings
<<glmmadmbfit,cache=TRUE>>=
fit_zipoisson <- glmmTMB(NCalls~(FoodTreatment+ArrivalTime)*SexParent+
                                     offset(log(BroodSize))+(1|Nest),
                                     data=Owls,
                                     zi=~1,
                                     family=poisson)
@

<<zipoisssum>>=
summary(fit_zipoisson)
@ 

We can also try a standard zero-inflated negative binomial model;
the default is the ``NB2'' parameterization (variance = $\mu(1+\mu/k)$).
<<glmmadmbnbinomfit,cache=TRUE>>=
fit_zinbinom <- update(fit_zipoisson,
                  family=list(family="nbinom2",link="log"))
@

Alternatively, use an ``NB1'' fit (variance = $\phi \mu$).
<<glmmadmbnbinom1fit,cache=TRUE>>=
fit_zinbinom1 <- update(fit_zipoisson,
                  family=list(family="nbinom1",link="log"))
@

Relax the assumption that total number of calls is strictly proportional
to brood size (i.e. using log(brood size) as an offset):
<<glmmadmbnbinom1vfit,cache=TRUE>>=
fit_zinbinom1_bs <- update(fit_zinbinom1,
                           . ~ (FoodTreatment+ArrivalTime)*SexParent+
                               BroodSize+(1|Nest))
@ 

Every change we have made so far improves the fit --- changing distributions
improves it enormously, while changing the role of brood size makes only
a modest (-1 AIC unit) difference:
<<aictab>>=
AICtab(fit_zipoiss,fit_zinbinom,fit_zinbinom1,fit_zinbinom1_bs)
@ 

\subsection{Hurdle models}

In contrast to zero-inflated models, hurdle models treat zero-count
and non-zero outcomes as two completely separate categories, rather than
treating the zero-count outcomes as a mixture of structural and
sampling zeros.

\\code{glmmTMB} includes truncated
Poisson and negative binomial familes and hence can fit hurdle models.
The two parts of the model have to be fitted separately, however.
First we fit a truncated distribution to the non-zero outcomes:

<<glmmadmbnbinomhfit,eval=FALSE>>=
fit_hnbinom1 <- update(fit_zinbinom1_bs,
                         data=subset(Owls,NCalls>0),
                         family=list(family="truncnbinom1",link="log"))
@ 

Then we fit a model to the binary part of the data (zero vs. non-zero).
In this case, I started by fitting a simple (intercept-only) model
with intercept-level random effects only.  This comes a bit closer
to matching the previous (zero-inflation) models, which treated zero-inflation
as a single constant level across the entire data set (in fact,
leaving out the random effects and just using 
\verb+glmmADMB(nz~1,data=Owls,family="binomial")+, or 
\verb+glm(nz~1,data=Owls,family="binomial")+, would
be an even closer match).
I then fitted a more complex binary model --- this is
all a matter of judgment about how complex a model it's worth
trying to fit to a given data set --- but it does look as though
the zero-inflation varies with arrival time and satiation.

<<glmmadmbcfit,cache=TRUE>>=
Owls$nz <- as.numeric(Owls$NCalls>0)
fit_count <- glmmadmb(nz~1+(1|Nest),
                         data=Owls,
                         family="binomial")
fit_ccount <- glmmadmb(nz~(FoodTreatment+ArrivalTime)*SexParent+(1|Nest),
                       data=Owls,
                       family="binomial")
AICtab(fit_count,fit_ccount)
summary(fit_ccount)
@ 

\subsection{Testing and inference}

(Sketchy: to be expanded.)

There are many challenging statistical issues surrounding tests
of terms in GLMMs. Most often people use minor variations of 
existing approaches (Wald tests, likelihood ratio tests, etc.),
either accounting for or sweeping under the rug some of the
differences that should be accounted for when moving either from
linear mixed models (LMMs) or generalized linear models (GLMs)
to GLMMs.  See \url{http://glmm.wikidot.com/faq}, or a good
book on GLMMs (!!), for a discussion of these issues.

In the meantime, keeping the limitations in mind, 
you can 
\begin{itemize}
  \item use AIC to select models or generated weighted predictions (see example above).
  \item use \code{anova} to perform a likelihood ratio test:
<<anovacomp>>=
anova(fit_zipoiss,fit_zinbinom)
@     
\item use \code{Anova} from the \code{car} package to generate Wald tests:
<<caranova>>=
car::Anova(fit_zinbinom)
@   
\end{itemize}

\begin{itemize}
\item coefplot2
\item drop1??, 
\item simulate??, 
\item parametric bootstrapping ??
\end{itemize}



\bibliography{glmmTMB}
\end{document}
